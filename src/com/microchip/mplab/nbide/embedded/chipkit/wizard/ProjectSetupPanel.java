/*
 * Copyright (c) 2017 Microchip Technology Inc. and its subsidiaries (Microchip). All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0 
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.microchip.mplab.nbide.embedded.chipkit.wizard;

import java.awt.Component;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.plaf.UIResource;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

class ProjectSetupPanel extends JPanel {

    
    private final ProjectSetupStep control;  // R.I.P. Sir John Vincent Hurt (22 January 1940 â€“ 25 January 2017)
    

    public ProjectSetupPanel(ProjectSetupStep control) {
        this.control = control;
        setName( NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.title") );
        initComponents();
        encodingCombo.setModel(new EncodingModel(NbPreferences.root().get("DEFAULT_CHARSET", "ISO-8859-1"))); //NOI18N
        encodingCombo.setRenderer( new EncodingRenderer() );
    }

    /**
     * This method is called from within the constructor to initialise the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourceProjectLocationLabel = new javax.swing.JLabel();
        sourceProjectLocationField = new javax.swing.JTextField();
        sourceProjectLocationBrowseButton = new javax.swing.JButton();
        projectNameLabel = new javax.swing.JLabel();
        projectNameField = new javax.swing.JTextField();
        targetProjectLocationLabel = new javax.swing.JLabel();
        targetProjectLocationField = new javax.swing.JTextField();
        targetProjectLocationBrowseButton = new javax.swing.JButton();
        encodingLabel = new javax.swing.JLabel();
        encodingCombo = new javax.swing.JComboBox<>();
        overwriteCheckBox = new javax.swing.JCheckBox();
        projectDirectoryLabel = new javax.swing.JLabel();
        projectDirectoryField = new javax.swing.JTextField();
        deviceLabel = new javax.swing.JLabel();
        arduinoLocationField = new javax.swing.JTextField();
        arduinoLocationBrowseButton = new javax.swing.JButton();
        arduinoLocationLabel = new javax.swing.JLabel();
        chipKitBoardCombo = new javax.swing.JComboBox<>();
        copyChipKitFilesCheckBox = new javax.swing.JCheckBox();
        chipkitCoreLocationLabel = new javax.swing.JLabel();
        chipkitCoreLocationField = new javax.swing.JTextField();
        chipkitCoreLocationBrowseButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();

        sourceProjectLocationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(sourceProjectLocationLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.sourceProjectLocationLabel.text")); // NOI18N

        sourceProjectLocationField.setText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.sourceProjectLocationField.text")); // NOI18N
        sourceProjectLocationField.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.sourceProjectLocationField.toolTipText")); // NOI18N
        sourceProjectLocationField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                sourceProjectLocationFieldFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(sourceProjectLocationBrowseButton, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.sourceProjectLocationBrowseButton.text")); // NOI18N
        sourceProjectLocationBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceProjectLocationBrowseButtonActionPerformed(evt);
            }
        });

        projectNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.projectNameLabel.text")); // NOI18N

        projectNameField.setText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.projectNameField.text")); // NOI18N
        projectNameField.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.projectNameField.toolTipText")); // NOI18N
        projectNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                projectNameFieldKeyReleased(evt);
            }
        });

        targetProjectLocationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(targetProjectLocationLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.targetProjectLocationLabel.text")); // NOI18N

        targetProjectLocationField.setText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.targetProjectLocationField.text")); // NOI18N
        targetProjectLocationField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                targetProjectLocationFieldFocusLost(evt);
            }
        });
        targetProjectLocationField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                targetProjectLocationFieldKeyReleased(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(targetProjectLocationBrowseButton, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.targetProjectLocationBrowseButton.text")); // NOI18N
        targetProjectLocationBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetProjectLocationBrowseButtonActionPerformed(evt);
            }
        });

        encodingLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(encodingLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.encodingLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(overwriteCheckBox, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.overwriteCheckBox.text")); // NOI18N
        overwriteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overwriteCheckBoxActionPerformed(evt);
            }
        });

        projectDirectoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(projectDirectoryLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.projectDirectoryLabel.text")); // NOI18N

        projectDirectoryField.setEditable(false);
        projectDirectoryField.setText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.projectDirectoryField.text")); // NOI18N

        deviceLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(deviceLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.deviceLabel.text")); // NOI18N

        arduinoLocationField.setText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.arduinoLocationField.text")); // NOI18N
        arduinoLocationField.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.arduinoLocationField.toolTipText")); // NOI18N
        arduinoLocationField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                arduinoLocationFieldFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(arduinoLocationBrowseButton, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.arduinoLocationBrowseButton.text")); // NOI18N
        arduinoLocationBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arduinoLocationBrowseButtonActionPerformed(evt);
            }
        });

        arduinoLocationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(arduinoLocationLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.arduinoLocationLabel.text")); // NOI18N

        chipKitBoardCombo.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.chipKitBoardCombo.toolTipText")); // NOI18N
        chipKitBoardCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chipKitBoardComboItemStateChanged(evt);
            }
        });

        copyChipKitFilesCheckBox.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(copyChipKitFilesCheckBox, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.copyChipKitFilesCheckBox.text")); // NOI18N

        chipkitCoreLocationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(chipkitCoreLocationLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.chipkitCoreLocationLabel.text")); // NOI18N

        chipkitCoreLocationField.setText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.chipkitCoreLocationField.text")); // NOI18N
        chipkitCoreLocationField.setToolTipText(org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.chipkitCoreLocationField.toolTipText")); // NOI18N
        chipkitCoreLocationField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                chipkitCoreLocationFieldFocusLost(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(chipkitCoreLocationBrowseButton, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.chipkitCoreLocationBrowseButton.text")); // NOI18N
        chipkitCoreLocationBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chipkitCoreLocationBrowseButtonActionPerformed(evt);
            }
        });

        infoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/microchip/mplab/nbide/embedded/chipkit/wizard/info_48.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(infoLabel, org.openide.util.NbBundle.getMessage(ProjectSetupPanel.class, "ProjectSetupPanel.infoLabel.text")); // NOI18N
        infoLabel.setIconTextGap(10);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sourceProjectLocationLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deviceLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(projectDirectoryLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(encodingLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(targetProjectLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(arduinoLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chipkitCoreLocationLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(projectNameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sourceProjectLocationField)
                                    .addComponent(targetProjectLocationField)
                                    .addComponent(arduinoLocationField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(arduinoLocationBrowseButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(targetProjectLocationBrowseButton)
                                    .addComponent(sourceProjectLocationBrowseButton)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(chipkitCoreLocationField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chipkitCoreLocationBrowseButton))
                            .addComponent(chipKitBoardCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(projectNameField)
                            .addComponent(projectDirectoryField)
                            .addComponent(encodingCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(overwriteCheckBox)
                            .addComponent(copyChipKitFilesCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 281, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceProjectLocationLabel)
                    .addComponent(sourceProjectLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sourceProjectLocationBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetProjectLocationLabel)
                    .addComponent(targetProjectLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetProjectLocationBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arduinoLocationLabel)
                    .addComponent(arduinoLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arduinoLocationBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chipkitCoreLocationLabel)
                    .addComponent(chipkitCoreLocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chipkitCoreLocationBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deviceLabel)
                    .addComponent(chipKitBoardCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectDirectoryLabel)
                    .addComponent(projectDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encodingLabel)
                    .addComponent(encodingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(infoLabel)
                .addGap(18, 18, 18)
                .addComponent(copyChipKitFilesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overwriteCheckBox)
                .addGap(58, 58, 58))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void overwriteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overwriteCheckBoxActionPerformed
        control.overwriteCheckBoxActionPerformed(evt);
    }//GEN-LAST:event_overwriteCheckBoxActionPerformed

    private void sourceProjectLocationBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceProjectLocationBrowseButtonActionPerformed
        control.sourceProjectLocationBrowseButtonActionPerformed(evt);
    }//GEN-LAST:event_sourceProjectLocationBrowseButtonActionPerformed

    private void targetProjectLocationBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetProjectLocationBrowseButtonActionPerformed
        control.targetProjectLocationBrowseButtonActionPerformed(evt);
    }//GEN-LAST:event_targetProjectLocationBrowseButtonActionPerformed

    private void targetProjectLocationFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_targetProjectLocationFieldKeyReleased
        control.targetProjectLocationFieldKeyReleased(evt);
    }//GEN-LAST:event_targetProjectLocationFieldKeyReleased

    private void projectNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_projectNameFieldKeyReleased
        control.projectNameFieldKeyReleased(evt);
    }//GEN-LAST:event_projectNameFieldKeyReleased

    private void arduinoLocationBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arduinoLocationBrowseButtonActionPerformed
        control.arduinoLocationBrowseButtonActionPerformed(evt);
    }//GEN-LAST:event_arduinoLocationBrowseButtonActionPerformed

    private void chipkitCoreLocationBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chipkitCoreLocationBrowseButtonActionPerformed
        control.chipkitCoreLocationBrowseButtonActionPerformed(evt);
    }//GEN-LAST:event_chipkitCoreLocationBrowseButtonActionPerformed

    private void chipkitCoreLocationFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chipkitCoreLocationFieldFocusLost
        control.chipkitCoreLocationFieldFocusLost(evt);
    }//GEN-LAST:event_chipkitCoreLocationFieldFocusLost

    private void arduinoLocationFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_arduinoLocationFieldFocusLost
        control.arduinoLocationFieldFocusLost(evt);
    }//GEN-LAST:event_arduinoLocationFieldFocusLost

    private void targetProjectLocationFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_targetProjectLocationFieldFocusLost
        control.targetProjectLocationFieldFocusLost(evt);
    }//GEN-LAST:event_targetProjectLocationFieldFocusLost

    private void sourceProjectLocationFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sourceProjectLocationFieldFocusLost
        control.sourceProjectLocationFieldFocusLost(evt);
    }//GEN-LAST:event_sourceProjectLocationFieldFocusLost

    private void chipKitBoardComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chipKitBoardComboItemStateChanged
        control.chipKitBoardComboItemStateChanged(evt);
    }//GEN-LAST:event_chipKitBoardComboItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton arduinoLocationBrowseButton;
    protected javax.swing.JTextField arduinoLocationField;
    private javax.swing.JLabel arduinoLocationLabel;
    protected javax.swing.JComboBox<String> chipKitBoardCombo;
    private javax.swing.JButton chipkitCoreLocationBrowseButton;
    protected javax.swing.JTextField chipkitCoreLocationField;
    private javax.swing.JLabel chipkitCoreLocationLabel;
    protected javax.swing.JCheckBox copyChipKitFilesCheckBox;
    private javax.swing.JLabel deviceLabel;
    protected javax.swing.JComboBox<Charset> encodingCombo;
    private javax.swing.JLabel encodingLabel;
    private javax.swing.JLabel infoLabel;
    protected javax.swing.JCheckBox overwriteCheckBox;
    protected javax.swing.JTextField projectDirectoryField;
    private javax.swing.JLabel projectDirectoryLabel;
    protected javax.swing.JTextField projectNameField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JButton sourceProjectLocationBrowseButton;
    protected javax.swing.JTextField sourceProjectLocationField;
    private javax.swing.JLabel sourceProjectLocationLabel;
    private javax.swing.JButton targetProjectLocationBrowseButton;
    protected javax.swing.JTextField targetProjectLocationField;
    private javax.swing.JLabel targetProjectLocationLabel;
    // End of variables declaration//GEN-END:variables

    private static class EncodingRenderer extends JLabel implements ListCellRenderer<Charset>, UIResource {

        public EncodingRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Charset value, int index, boolean isSelected, boolean cellHasFocus) {
            assert value instanceof Charset;
            setName("ComboBox.listRenderer"); // NOI18N
            setText( value.displayName() );
            setIcon(null);
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            return this;
        }

        @Override
        public String getName() {
            String name = super.getName();
            return name == null ? "ComboBox.renderer" : name; // NOI18N
        }
    }
    
    private static class EncodingModel extends DefaultComboBoxModel <Charset> {

        public EncodingModel(String originalEncoding) {
            Charset defEnc = null;
            for (Charset c : Charset.availableCharsets().values()) {
                if (c.name().equals(originalEncoding)) {
                    defEnc = c;
                }
                addElement(c);
            }
            if (defEnc == null) {
                //Create artificial Charset to keep the original value
                //May happen when the project was set up on the platform
                //which supports more encodings
                try {
                    defEnc = new UnknownCharset(originalEncoding);
                    addElement(defEnc);
                } catch (IllegalCharsetNameException e) {
                    //The source.encoding property is completely broken
                    Logger.getLogger(this.getClass().getName()).log(Level.INFO, "IllegalCharsetName: {0}", originalEncoding);
                }
            }
            if (defEnc == null) {
                defEnc = Charset.defaultCharset();
            }
            setSelectedItem(defEnc);
        }
    }

    private static class UnknownCharset extends Charset {

        UnknownCharset(String name) {
            super(name, new String[0]);
        }

        @Override
        public boolean contains(Charset c) {
            throw new UnsupportedOperationException();
        }

        @Override
        public CharsetDecoder newDecoder() {
            throw new UnsupportedOperationException();
        }

        @Override
        public CharsetEncoder newEncoder() {
            throw new UnsupportedOperationException();
        }
    }

}
